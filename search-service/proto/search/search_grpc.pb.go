// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: proto/search/search.proto

package search

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sdk "search-service/proto/sdk"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	RenderSuggestion(ctx context.Context, in *MsgSuggestion, opts ...grpc.CallOption) (*sdk.BaseResponse, error)
	SearchTitlePrefix(ctx context.Context, in *MessageSearchPrefix, opts ...grpc.CallOption) (*sdk.BaseResponse, error)
	GetNation(ctx context.Context, in *MsgIP, opts ...grpc.CallOption) (*sdk.BaseResponse, error)
	SearchProperty(ctx context.Context, in *MsgSearchProperty, opts ...grpc.CallOption) (*sdk.BaseResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) RenderSuggestion(ctx context.Context, in *MsgSuggestion, opts ...grpc.CallOption) (*sdk.BaseResponse, error) {
	out := new(sdk.BaseResponse)
	err := c.cc.Invoke(ctx, "/searchService.searchService/RenderSuggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchTitlePrefix(ctx context.Context, in *MessageSearchPrefix, opts ...grpc.CallOption) (*sdk.BaseResponse, error) {
	out := new(sdk.BaseResponse)
	err := c.cc.Invoke(ctx, "/searchService.searchService/searchTitlePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetNation(ctx context.Context, in *MsgIP, opts ...grpc.CallOption) (*sdk.BaseResponse, error) {
	out := new(sdk.BaseResponse)
	err := c.cc.Invoke(ctx, "/searchService.searchService/getNation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchProperty(ctx context.Context, in *MsgSearchProperty, opts ...grpc.CallOption) (*sdk.BaseResponse, error) {
	out := new(sdk.BaseResponse)
	err := c.cc.Invoke(ctx, "/searchService.searchService/searchProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	RenderSuggestion(context.Context, *MsgSuggestion) (*sdk.BaseResponse, error)
	SearchTitlePrefix(context.Context, *MessageSearchPrefix) (*sdk.BaseResponse, error)
	GetNation(context.Context, *MsgIP) (*sdk.BaseResponse, error)
	SearchProperty(context.Context, *MsgSearchProperty) (*sdk.BaseResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) RenderSuggestion(context.Context, *MsgSuggestion) (*sdk.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderSuggestion not implemented")
}
func (UnimplementedSearchServiceServer) SearchTitlePrefix(context.Context, *MessageSearchPrefix) (*sdk.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTitlePrefix not implemented")
}
func (UnimplementedSearchServiceServer) GetNation(context.Context, *MsgIP) (*sdk.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNation not implemented")
}
func (UnimplementedSearchServiceServer) SearchProperty(context.Context, *MsgSearchProperty) (*sdk.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProperty not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_RenderSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSuggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).RenderSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchService.searchService/RenderSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).RenderSuggestion(ctx, req.(*MsgSuggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchTitlePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSearchPrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchTitlePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchService.searchService/searchTitlePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchTitlePrefix(ctx, req.(*MessageSearchPrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetNation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetNation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchService.searchService/getNation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetNation(ctx, req.(*MsgIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSearchProperty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchService.searchService/searchProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchProperty(ctx, req.(*MsgSearchProperty))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "searchService.searchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderSuggestion",
			Handler:    _SearchService_RenderSuggestion_Handler,
		},
		{
			MethodName: "searchTitlePrefix",
			Handler:    _SearchService_SearchTitlePrefix_Handler,
		},
		{
			MethodName: "getNation",
			Handler:    _SearchService_GetNation_Handler,
		},
		{
			MethodName: "searchProperty",
			Handler:    _SearchService_SearchProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/search/search.proto",
}
